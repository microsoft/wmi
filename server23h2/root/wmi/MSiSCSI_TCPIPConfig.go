// Copyright 2019 (c) Microsoft Corporation.
// Licensed under the MIT license.

//
// Author:
//      Auto Generated on 6/14/2024 using wmigen
//      Source root.WMI
//////////////////////////////////////////////
package wmi

import (
	"github.com/microsoft/wmi/pkg/base/instance"
	"github.com/microsoft/wmi/pkg/base/query"
	"github.com/microsoft/wmi/pkg/errors"
	cim "github.com/microsoft/wmi/pkg/wmiinstance"
	"reflect"
)

// MSiSCSI_TCPIPConfig struct
type MSiSCSI_TCPIPConfig struct {
	*cim.WmiInstance

	//
	Active bool

	// Alternate DNS Server
	AlternateDNSServer ISCSI_IP_Address

	// Static Default Gateway IP address
	DefaultGateway ISCSI_IP_Address

	// TRUE if the adapter should use DHCP to discovery its IP address information.
	EnableDHCP bool

	//
	InstanceName string

	// IP address of the adapter
	IpAddress ISCSI_IP_Address

	// IP Versions supported **Add #defines**
	IPVersions uint32

	// Preferred DNS Server
	PreferredDNSServer ISCSI_IP_Address

	// Static Subnet Mask
	SubnetMask ISCSI_IP_Address

	// TRUE if the adapter should use DHCP to discover DNS addresses.
	UseDHCPForDNS bool

	// TRUE if the adapter should use an autogenerated and non routable (link local) address as its IP address.
	UseLinkLocalAddress bool
}

func NewMSiSCSI_TCPIPConfigEx1(instance *cim.WmiInstance) (newInstance *MSiSCSI_TCPIPConfig, err error) {
	tmp, err := instance, nil

	if err != nil {
		return
	}
	newInstance = &MSiSCSI_TCPIPConfig{
		WmiInstance: tmp,
	}
	return
}

func NewMSiSCSI_TCPIPConfigEx6(hostName string,
	wmiNamespace string,
	userName string,
	password string,
	domainName string,
	query *query.WmiQuery) (newInstance *MSiSCSI_TCPIPConfig, err error) {
	tmp, err := instance.GetWmiInstance(hostName, wmiNamespace, userName, password, domainName, query)

	if err != nil {
		return
	}
	newInstance = &MSiSCSI_TCPIPConfig{
		WmiInstance: tmp,
	}
	return
}

// SetActive sets the value of Active for the instance
func (instance *MSiSCSI_TCPIPConfig) SetPropertyActive(value bool) (err error) {
	return instance.SetProperty("Active", (value))
}

// GetActive gets the value of Active for the instance
func (instance *MSiSCSI_TCPIPConfig) GetPropertyActive() (value bool, err error) {
	retValue, err := instance.GetProperty("Active")
	if err != nil {
		return
	}
	if retValue == nil {
		// Doesn't have any value. Return empty
		return
	}

	valuetmp, ok := retValue.(bool)
	if !ok {
		err = errors.Wrapf(errors.InvalidType, " bool is Invalid. Expected %s", reflect.TypeOf(retValue))
		return
	}

	value = bool(valuetmp)

	return
}

// SetAlternateDNSServer sets the value of AlternateDNSServer for the instance
func (instance *MSiSCSI_TCPIPConfig) SetPropertyAlternateDNSServer(value ISCSI_IP_Address) (err error) {
	return instance.SetProperty("AlternateDNSServer", (value))
}

// GetAlternateDNSServer gets the value of AlternateDNSServer for the instance
func (instance *MSiSCSI_TCPIPConfig) GetPropertyAlternateDNSServer() (value ISCSI_IP_Address, err error) {
	retValue, err := instance.GetProperty("AlternateDNSServer")
	if err != nil {
		return
	}
	if retValue == nil {
		// Doesn't have any value. Return empty
		return
	}

	valuetmp, ok := retValue.(ISCSI_IP_Address)
	if !ok {
		err = errors.Wrapf(errors.InvalidType, " ISCSI_IP_Address is Invalid. Expected %s", reflect.TypeOf(retValue))
		return
	}

	value = ISCSI_IP_Address(valuetmp)

	return
}

// SetDefaultGateway sets the value of DefaultGateway for the instance
func (instance *MSiSCSI_TCPIPConfig) SetPropertyDefaultGateway(value ISCSI_IP_Address) (err error) {
	return instance.SetProperty("DefaultGateway", (value))
}

// GetDefaultGateway gets the value of DefaultGateway for the instance
func (instance *MSiSCSI_TCPIPConfig) GetPropertyDefaultGateway() (value ISCSI_IP_Address, err error) {
	retValue, err := instance.GetProperty("DefaultGateway")
	if err != nil {
		return
	}
	if retValue == nil {
		// Doesn't have any value. Return empty
		return
	}

	valuetmp, ok := retValue.(ISCSI_IP_Address)
	if !ok {
		err = errors.Wrapf(errors.InvalidType, " ISCSI_IP_Address is Invalid. Expected %s", reflect.TypeOf(retValue))
		return
	}

	value = ISCSI_IP_Address(valuetmp)

	return
}

// SetEnableDHCP sets the value of EnableDHCP for the instance
func (instance *MSiSCSI_TCPIPConfig) SetPropertyEnableDHCP(value bool) (err error) {
	return instance.SetProperty("EnableDHCP", (value))
}

// GetEnableDHCP gets the value of EnableDHCP for the instance
func (instance *MSiSCSI_TCPIPConfig) GetPropertyEnableDHCP() (value bool, err error) {
	retValue, err := instance.GetProperty("EnableDHCP")
	if err != nil {
		return
	}
	if retValue == nil {
		// Doesn't have any value. Return empty
		return
	}

	valuetmp, ok := retValue.(bool)
	if !ok {
		err = errors.Wrapf(errors.InvalidType, " bool is Invalid. Expected %s", reflect.TypeOf(retValue))
		return
	}

	value = bool(valuetmp)

	return
}

// SetInstanceName sets the value of InstanceName for the instance
func (instance *MSiSCSI_TCPIPConfig) SetPropertyInstanceName(value string) (err error) {
	return instance.SetProperty("InstanceName", (value))
}

// GetInstanceName gets the value of InstanceName for the instance
func (instance *MSiSCSI_TCPIPConfig) GetPropertyInstanceName() (value string, err error) {
	retValue, err := instance.GetProperty("InstanceName")
	if err != nil {
		return
	}
	if retValue == nil {
		// Doesn't have any value. Return empty
		return
	}

	valuetmp, ok := retValue.(string)
	if !ok {
		err = errors.Wrapf(errors.InvalidType, " string is Invalid. Expected %s", reflect.TypeOf(retValue))
		return
	}

	value = string(valuetmp)

	return
}

// SetIpAddress sets the value of IpAddress for the instance
func (instance *MSiSCSI_TCPIPConfig) SetPropertyIpAddress(value ISCSI_IP_Address) (err error) {
	return instance.SetProperty("IpAddress", (value))
}

// GetIpAddress gets the value of IpAddress for the instance
func (instance *MSiSCSI_TCPIPConfig) GetPropertyIpAddress() (value ISCSI_IP_Address, err error) {
	retValue, err := instance.GetProperty("IpAddress")
	if err != nil {
		return
	}
	if retValue == nil {
		// Doesn't have any value. Return empty
		return
	}

	valuetmp, ok := retValue.(ISCSI_IP_Address)
	if !ok {
		err = errors.Wrapf(errors.InvalidType, " ISCSI_IP_Address is Invalid. Expected %s", reflect.TypeOf(retValue))
		return
	}

	value = ISCSI_IP_Address(valuetmp)

	return
}

// SetIPVersions sets the value of IPVersions for the instance
func (instance *MSiSCSI_TCPIPConfig) SetPropertyIPVersions(value uint32) (err error) {
	return instance.SetProperty("IPVersions", (value))
}

// GetIPVersions gets the value of IPVersions for the instance
func (instance *MSiSCSI_TCPIPConfig) GetPropertyIPVersions() (value uint32, err error) {
	retValue, err := instance.GetProperty("IPVersions")
	if err != nil {
		return
	}
	if retValue == nil {
		// Doesn't have any value. Return empty
		return
	}

	valuetmp, ok := retValue.(uint32)
	if !ok {
		err = errors.Wrapf(errors.InvalidType, " uint32 is Invalid. Expected %s", reflect.TypeOf(retValue))
		return
	}

	value = uint32(valuetmp)

	return
}

// SetPreferredDNSServer sets the value of PreferredDNSServer for the instance
func (instance *MSiSCSI_TCPIPConfig) SetPropertyPreferredDNSServer(value ISCSI_IP_Address) (err error) {
	return instance.SetProperty("PreferredDNSServer", (value))
}

// GetPreferredDNSServer gets the value of PreferredDNSServer for the instance
func (instance *MSiSCSI_TCPIPConfig) GetPropertyPreferredDNSServer() (value ISCSI_IP_Address, err error) {
	retValue, err := instance.GetProperty("PreferredDNSServer")
	if err != nil {
		return
	}
	if retValue == nil {
		// Doesn't have any value. Return empty
		return
	}

	valuetmp, ok := retValue.(ISCSI_IP_Address)
	if !ok {
		err = errors.Wrapf(errors.InvalidType, " ISCSI_IP_Address is Invalid. Expected %s", reflect.TypeOf(retValue))
		return
	}

	value = ISCSI_IP_Address(valuetmp)

	return
}

// SetSubnetMask sets the value of SubnetMask for the instance
func (instance *MSiSCSI_TCPIPConfig) SetPropertySubnetMask(value ISCSI_IP_Address) (err error) {
	return instance.SetProperty("SubnetMask", (value))
}

// GetSubnetMask gets the value of SubnetMask for the instance
func (instance *MSiSCSI_TCPIPConfig) GetPropertySubnetMask() (value ISCSI_IP_Address, err error) {
	retValue, err := instance.GetProperty("SubnetMask")
	if err != nil {
		return
	}
	if retValue == nil {
		// Doesn't have any value. Return empty
		return
	}

	valuetmp, ok := retValue.(ISCSI_IP_Address)
	if !ok {
		err = errors.Wrapf(errors.InvalidType, " ISCSI_IP_Address is Invalid. Expected %s", reflect.TypeOf(retValue))
		return
	}

	value = ISCSI_IP_Address(valuetmp)

	return
}

// SetUseDHCPForDNS sets the value of UseDHCPForDNS for the instance
func (instance *MSiSCSI_TCPIPConfig) SetPropertyUseDHCPForDNS(value bool) (err error) {
	return instance.SetProperty("UseDHCPForDNS", (value))
}

// GetUseDHCPForDNS gets the value of UseDHCPForDNS for the instance
func (instance *MSiSCSI_TCPIPConfig) GetPropertyUseDHCPForDNS() (value bool, err error) {
	retValue, err := instance.GetProperty("UseDHCPForDNS")
	if err != nil {
		return
	}
	if retValue == nil {
		// Doesn't have any value. Return empty
		return
	}

	valuetmp, ok := retValue.(bool)
	if !ok {
		err = errors.Wrapf(errors.InvalidType, " bool is Invalid. Expected %s", reflect.TypeOf(retValue))
		return
	}

	value = bool(valuetmp)

	return
}

// SetUseLinkLocalAddress sets the value of UseLinkLocalAddress for the instance
func (instance *MSiSCSI_TCPIPConfig) SetPropertyUseLinkLocalAddress(value bool) (err error) {
	return instance.SetProperty("UseLinkLocalAddress", (value))
}

// GetUseLinkLocalAddress gets the value of UseLinkLocalAddress for the instance
func (instance *MSiSCSI_TCPIPConfig) GetPropertyUseLinkLocalAddress() (value bool, err error) {
	retValue, err := instance.GetProperty("UseLinkLocalAddress")
	if err != nil {
		return
	}
	if retValue == nil {
		// Doesn't have any value. Return empty
		return
	}

	valuetmp, ok := retValue.(bool)
	if !ok {
		err = errors.Wrapf(errors.InvalidType, " bool is Invalid. Expected %s", reflect.TypeOf(retValue))
		return
	}

	value = bool(valuetmp)

	return
}
